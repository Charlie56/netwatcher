#!/bin/sh

# Functions
ask ()
{
    local done=false
    while [[ $done == false ]]; do
        printf " (y/n) "
        read reply
        done=true
        case $reply in
            n | N | no | NO   ) ANSWER="n"  ;;
            y | Y | yes | YES ) ANSWER="y" ;;
            *                 ) printf "\nInvalid response. Try again:"
                                      done=false ;;
        esac
    done
}

collect_response ()
{
    local question="$1"
    local default="$2"
    local done=false

    while [[ $done == false ]]; do
        printf "${question}\n"
        printf "[ Enter = $default ]: "
        read RESPONSE
        [[ -z $RESPONSE ]] && RESPONSE="$default"
        printf "Is \"$RESPONSE\" correct? (y/n) "
        read reply
        case $reply in
            n | N | no | NO   ) done=false ;;
            y | Y | yes | YES ) done=true  ;;
            *                 ) printf "\nInvalid response. Try again:" ;;
        esac
    done
}

uninstall ()
{
     launchctl unload \
         ~/Library/LaunchAgents/local.netwatcher.plist > /dev/null 2>&1
     rm -f ~/Library/Scripts/netwatcher
     rm -f ~/Library/LaunchAgents/local.netwatcher.plist
     rm -f ~/Library/Logs/netwatcher.log
     rm -rf ~/Library/Workflows/notify.workflow
     rm -rf ~/Library/Automator/Display\ Notification\ Center\ Alert.action
}

usage ()
{
     printf "Usage: $(basename $0) [-u] [-r] [-t secs] [-p secs] -o\n"
     printf "       -u Stop and uninstall\n"
     printf "       -r Reinstall (re-ask setup questions)\n"
     printf "       -t Time (in seconds) that must pass between network changes for them to be considered valid\n"
     printf "       -p Time (in seconds) to pause before evaluating a network change to allow interfaces to settle\n"
     printf "       -o Disables optimization test (i.e. don't check if configd trigger was due to new interface/ip combo)\n"
     exit 0
}

errtrap ()
{   # Die if we trap an error
     ES=${?}
     printf "ERROR line ${1}: Command exited with status ${ES}.\n" |\
     exit 1
}

#-------------------------------------------------------------------------------
# Main script
while getopts ":urt:p:o" OPTION; do
     case $OPTION in
          u) UNINSTALL=true ;;
          r) REINSTALL=true ;;
          t) THROTTLE_SET=true
             THROTTLE_TIME=$OPTARG ;;
          p) PAUSE_TO_SETTLE=true
             PAUSE_TIME=$OPTARG ;;
          o) DOL=true ;;
          ?) usage ;;
     esac
done
shift $((OPTIND-1))

# trap errors
trap 'errtrap ${LINENO}' ERR

uninstall
[[ $UNINSTALL == true ]] && exit 0

RC_FILE=~/.netwatcherrc
[[ $REINSTALL == true ]] && rm -f $RC_FILE

# Load previous settings
if [[ -r $RC_FILE ]]; then
    source $RC_FILE
    printf "Using existing $RC_FILE\n"

else
    # Collect settings
    touch $RC_FILE

    if [[ -x /Applications/Proxifier.app/Contents/MacOS/Proxifier ]]; then
    printf "PROXIFIER=true\n" >> $RC_FILE
    else
    printf "PROXIFIER=false\n" >> $RC_FILE
    fi

    printf "Do you want to watch for wired ethernet connections?"
    ask
    if [[ $ANSWER == y ]]; then
        printf "ETHERNET=true\n" >> $RC_FILE
    else
        printf "ETHERNET=false\n" >> $RC_FILE
    fi

    printf "Do you want to enable flight mode? (Turns off Wi-Fi if not connected)"
    ask
    if [[ $ANSWER == y ]]; then
        printf "FLIGHT_MODE=true\n" >> $RC_FILE
    else
        printf "FLIGHT_MODE=false\n" >> $RC_FILE
    fi

    printf "Do you want to change your status in Messages when your connection changes?"
    ask
    if [[ $ANSWER == y ]]; then
        printf "\nModify $RC_FILE to change the status messages\n\n"
        printf "WORK_STATUS=\"In my office\"\n" >> $RC_FILE
        printf "HOME_STATUS=\"At home\"\n" >> $RC_FILE
        printf "VPN_STATUS=\"On VPN\"\n" >> $RC_FILE
    fi

    collect_response "Enter the name of your work printer or \"none\" to disable this feature" "XEROX WorkCentre 4250"
    printf "WORK_PRINTER=\"$RESPONSE\"\n" >> $RC_FILE
    collect_response "Enter the name of your home printer or \"none\" to disable this feature" "Canon MP560 series"
    printf "HOME_PRINTER=\"$RESPONSE\"\n" >> $RC_FILE

    printf "Do you want to enable Notification Center alerts? (Requires OSX >= 10.8)"
    ask
    if [[ $ANSWER == y ]]; then
        printf "NOTIFICATION_CENTER=true\n" >> $RC_FILE
    else
        printf "NOTIFICATION_CENTER=false\n" >> $RC_FILE
    fi

    collect_response "Enter the IP address pattern of your workplace" "10.146"
    printf "WORK_IP_PATTERN=\"$RESPONSE\"\n" >> $RC_FILE

    collect_response "Enter the domain suffix pattern of your workplace" "example.com"
    printf "WORK_DOMAIN_PATTERN=\"$RESPONSE\"\n" >> $RC_FILE

    collect_response "Enter the SSID for your workplace" "clear"
    printf "WORK_SSID=\"$RESPONSE\"\n" >> $RC_FILE

    collect_response "Enter the SSID for your home" "wrt"
    printf "HOME_SSID=\"$RESPONSE\"\n" >> $RC_FILE

    collect_response "Enter the domain suffix pattern for your home" "internal"
    printf "HOME_DOMAIN_PATTERN=\"$RESPONSE\"\n" >> $RC_FILE
fi

cat $(dirname $0)/Library/LaunchAgents/local.netwatcher.plist_template | sed "s/USERX/$USER/g" > $(dirname $0)/Library/LaunchAgents/local.netwatcher.plist
cp -r $(dirname $0)/Library ~/

[[ $THROTTLE_SET == true ]] && THROTTLE_OPTIONS="-t$THROTTLE_TIME"
[[ $PAUSE_TO_SETTLE == true ]] && PAUSE_OPTIONS="-p$PAUSE_TIME"
[[ $DOL == true ]] && DOL_OPTIONS="-o"

ARGS=("$THROTTLE_OPTIONS" "$PAUSE_OPTIONS" "$DOL_OPTIONS")
for ((i=0; i<${#ARGS[@]}; i++)); do
   if ((${#ARGS[i]} == 0)); then
      unset ARGS[i]
   fi
done

if [[ -n $OPTION ]]; then
    printf "Setting options to: $THROTTLE_OPTIONS $PAUSE_OPTIONS $DOL_OPTIONS\n"
    defaults write ${HOME}/Library/LaunchAgents/local.netwatcher.plist \
         ProgramArguments \
         -array "${HOME}/Library/Scripts/netwatcher" ${ARGS[@]}
    plutil -convert xml1 ~/Library/LaunchAgents/local.netwatcher.plist
fi

launchctl load ~/Library/LaunchAgents/local.netwatcher.plist

printf "Installation complete\n"
printf "Use \"defaults read ~/Library/LaunchAgents/local.netwatcher.plist\" to see default plist values\n"
printf "Use \"defaults write <key> <value> ~/Library/LaunchAgents/local.netwatcher.plist\" to change plist values\n"
printf "Do \"sudo touch /Library/Preferences/SystemConfiguration\" to test\n"

exit 0
